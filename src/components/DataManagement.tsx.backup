import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";
import { Progress } from "./ui/progress";
import { Sheet, SheetContent, SheetHeader, SheetTitle } from "./ui/sheet";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "./ui/table";
import { Drawer, DrawerContent, DrawerDescription, DrawerHeader, DrawerTitle } from "./ui/drawer";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "./ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { RadioGroup, RadioGroupItem } from "./ui/radio-group";
import { Checkbox } from "./ui/checkbox";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Textarea } from "./ui/textarea";
import { 
  Upload,
  Database,
  Eye,
  Settings,
  Download,
  FileText,
  Clock,
  TrendingUp,
  X,
  CheckCircle,
  AlertCircle,
  Info,
  AlertTriangle,
  Zap,
  BarChart3,
  Grid3X3,
  List,
  Columns
} from "lucide-react";
import { toast } from "sonner";


interface DataManagementProps {
  onNavigateToPreprocessing?: () => void;
}

export function DataManagement({ onNavigateToPreprocessing }: DataManagementProps = {}) {
  const [selectedDataset, setSelectedDataset] = useState<any>(null);
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [activeSubTab, setActiveSubTab] = useState("数据集");
  
  // 视图模式状态
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [isColumnSettingsOpen, setIsColumnSettingsOpen] = useState(false);
  
  // 列设置状态
  const [columnSettings, setColumnSettings] = useState({
    title: { visible: true, order: 0 },
    description: { visible: true, order: 1 },
    categories: { visible: true, order: 2 },
    format: { visible: true, order: 3 },
    size: { visible: true, order: 4 },
    rows: { visible: true, order: 5 },
    columns: { visible: true, order: 6 },
    completeness: { visible: true, order: 7 },
    source: { visible: true, order: 8 },
    actions: { visible: true, order: 9 }
  });
  const [isCreateTaskDrawerOpen, setIsCreateTaskDrawerOpen] = useState(false);
  const [selectedDatasetForPreprocessing, setSelectedDatasetForPreprocessing] = useState<any>(null);
  const [isTaskDetailModalOpen, setIsTaskDetailModalOpen] = useState(false);
  const [isStartExecutionModalOpen, setIsStartExecutionModalOpen] = useState(false);
  const [isStopTaskModalOpen, setIsStopTaskModalOpen] = useState(false);
  const [isAddDataSourceModalOpen, setIsAddDataSourceModalOpen] = useState(false);
  const [dataSourceFormData, setDataSourceFormData] = useState({
    name: "",
    type: "",
    description: "",
    autoSync: "",
    retentionDays: "30",
    priority: "中"
  });
  const [taskFormData, setTaskFormData] = useState({
    taskName: "",
    priority: "",
    targetDataset: "",
    governanceOperations: [],
    qualityThreshold: "85",
    sampleSize: "10000",
    automationLevel: "",
    enableFineTuning: false,
    saveIntermediateResults: false,
    maxExecutionTime: "2"
  });

  const handleCreateTaskAndNavigate = () => {
    // 处理创建任务逻辑
    console.log("创建预处理任务:", taskFormData);
    setIsCreateTaskDrawerOpen(false);
    
    // 重置表单
    setTaskFormData({
      taskName: "",
      priority: "",
      targetDataset: "",
      governanceOperations: [],
      qualityThreshold: "85",
      sampleSize: "10000",
      automationLevel: "",
      enableFineTuning: false,
      saveIntermediateResults: false,
      maxExecutionTime: "2"
    });
    
    // 如果是从数据集卡片点击的预处理按钮，跳转到数据预处理页面
    if (selectedDatasetForPreprocessing && onNavigateToPreprocessing) {
      setActiveSubTab("数据预处理");
      onNavigateToPreprocessing();
    }
    
    setSelectedDatasetForPreprocessing(null);
  };

  const handleAddDataSource = () => {
    // 处理新增数据源逻辑
    console.log("新增数据源:", dataSourceFormData);
    setIsAddDataSourceModalOpen(false);
    
    // 重置表单
    setDataSourceFormData({
      name: "",
      type: "",
      description: "",
      autoSync: "",
      retentionDays: "30",
      priority: "中"
    });
    
    toast.success("数据源创建成功", {
      description: `数据源 "${dataSourceFormData.name}" 已成功创建`
    });
  };

  const handleCancelDataSource = () => {
    setIsAddDataSourceModalOpen(false);
    // 重置表单
    setDataSourceFormData({
      name: "",
      type: "",
      description: "",
      autoSync: "",
      retentionDays: "30",
      priority: "中"
    });
  };
  const datasets = [
    {
      id: 1,
      title: "钢铁缺陷数据集",
      description: "基于用户产品智能推荐引荐用户中的智能推荐功能重新推荐",
      categories: [
        { name: "数据", color: "bg-blue-500 text-white" },
        { name: "系统分析", color: "bg-green-500 text-white" }
      ],
      tags: [
        { name: "缺陷检测", color: "bg-blue-100 text-blue-700" },
        { name: "智能推荐", color: "bg-green-100 text-green-700" }
      ],
      format: "CSV",
      size: "150 MB",
      rows: "50,000",
      columns: "25",
      completeness: 92,
      source: "文件上传",
      color: "blue"
    },
    {
      id: 2,
      title: "电力能源数据集",
      description: "基于企业管理数据统计中的服务分支以外的智能推荐功能进而特制",
      categories: [
        { name: "数据", color: "bg-blue-500 text-white" },
        { name: "时间序列", color: "bg-purple-500 text-white" }
      ],
      tags: [
        { name: "能源预测", color: "bg-blue-100 text-blue-700" },
        { name: "企业管理", color: "bg-purple-100 text-purple-700" }
      ],
      format: "CSV",
      size: "45 MB",
      rows: "120,000",
      columns: "12",
      completeness: 88,
      source: "数据库",
      color: "green"
    },
    {
      id: 3,
      title: "生产工艺数据集",
      description: "基于目标数据智能推荐中的分析化。量实最终优化产品分析",
      categories: [
        { name: "处理中", color: "bg-orange-500 text-white" },
        { name: "系统数据", color: "bg-gray-500 text-white" }
      ],
      tags: [
        { name: "工艺优化", color: "bg-red-100 text-red-700" },
        { name: "产品分析", color: "bg-yellow-100 text-yellow-700" }
      ],
      format: "Excel",
      size: "85 MB",
      rows: "30,000",
      columns: "35",
      completeness: 95,
      source: "数据库",
      color: "orange"
    }
  ];

  const stats = [
    { 
      label: "总数据集", 
      value: "15", 
      subLabel: "上传数据集",
      subValue: "13",
      subLabel2: "订阅数据集", 
      subValue2: "2",
      icon: Database, 
      bgColor: "bg-blue-400",
      textColor: "text-white"
    },
    { 
      label: "数据量", 
      value: "2.3TB", 
      subLabel: "数据条数",
      subValue: "178500006",
      subLabel2: "", 
      subValue2: "",
      icon: FileText, 
      bgColor: "bg-green-400",
      textColor: "text-white"
    },
    { 
      label: "处理中", 
      value: "3", 
      subLabel: "待处理",
      subValue: "1",
      subLabel2: "", 
      subValue2: "",
      icon: Clock, 
      bgColor: "bg-orange-400",
      textColor: "text-white"
    },
    { 
      label: "数据完整度", 
      value: "91%", 
      subLabel: "",
      subValue: "",
      subLabel2: "", 
      subValue2: "",
      icon: TrendingUp, 
      bgColor: "bg-purple-400",
      textColor: "text-white"
    }
  ];

  // 根据子页面渲染不同内容
  const renderSubPageContent = () => {
    switch (activeSubTab) {
      case "数据集":
        return renderDatasetContent();
      case "数据预处理":
        return (
          <div className="space-y-6">
            {/* 处理中任务通知 */}
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
              <div className="flex items-center">
                <Info className="h-5 w-5 text-blue-400 mr-3" />
                <div>
                  <h3 className="text-sm font-medium text-blue-800">处理中任务</h3>
                  <p className="text-sm text-blue-700 mt-1">当前有 1 个预处理任务正在执行中，请耐心等待处理完成。</p>
                </div>
              </div>
            </div>

            {/* 预处理任务管理 */}
            <div className="bg-white rounded-lg shadow-sm border">
              <div className="px-6 py-4 border-b flex items-center justify-between">
                <h2 className="text-lg font-medium text-gray-900">预处理任务管理</h2>
                <Button 
                  className="bg-blue-500 hover:bg-blue-600 text-white"
                  onClick={() => setIsCreateTaskDrawerOpen(true)}
                >
                  创建预处理任务
                </Button>
              </div>

              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>任务名称</TableHead>
                      <TableHead>数据集</TableHead>
                      <TableHead>类型</TableHead>
                      <TableHead>状态</TableHead>
                      <TableHead>操作内容</TableHead>
                      <TableHead>开始时间</TableHead>
                      <TableHead>操作</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    <TableRow>
                      <TableCell>传感器数据预处理</TableCell>
                      <TableCell>生产线传感器数据集</TableCell>
                      <TableCell>数据清洗</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 rounded-full bg-green-500"></div>
                          <span className="text-green-700">已完成</span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-1">
                          <Badge variant="secondary" className="text-xs">异常值处理</Badge>
                          <Badge variant="secondary" className="text-xs">缺失值处理</Badge>
                          <Badge variant="secondary" className="text-xs">数据标准化</Badge>
                        </div>
                      </TableCell>
                      <TableCell>2024-01-15 09:00:00</TableCell>
                      <TableCell>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => setIsTaskDetailModalOpen(true)}
                        >
                          查看详情
                        </Button>
                      </TableCell>
                    </TableRow>
                    
                    <TableRow>
                      <TableCell>缺陷记录特征工程</TableCell>
                      <TableCell>设备缺陷记录集</TableCell>
                      <TableCell>特征工程</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 rounded-full bg-blue-500"></div>
                          <span className="text-blue-700">进行中</span>
                          <div className="w-20 ml-2">
                            <Progress value={65} className="h-2" />
                            <span className="text-xs text-gray-500 ml-1">65%</span>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-1">
                          <Badge variant="secondary" className="text-xs">特征选择</Badge>
                          <Badge variant="secondary" className="text-xs">特征构建</Badge>
                          <Badge variant="secondary" className="text-xs">特征组合</Badge>
                        </div>
                      </TableCell>
                      <TableCell>2024-01-15 14:00:00</TableCell>
                      <TableCell>
                        <Button 
                          variant="destructive" 
                          size="sm"
                          onClick={() => setIsStopTaskModalOpen(true)}
                        >
                          停止
                        </Button>
                      </TableCell>
                    </TableRow>
                    
                    <TableRow>
                      <TableCell>ERP数据质量评估</TableCell>
                      <TableCell>ERP系统数据</TableCell>
                      <TableCell>质量评估</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 rounded-full bg-yellow-500"></div>
                          <span className="text-yellow-700">待执行</span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-1">
                          <Badge variant="secondary" className="text-xs">完整性检测</Badge>
                          <Badge variant="secondary" className="text-xs">一致性校验</Badge>
                          <Badge variant="secondary" className="text-xs">准确性评估</Badge>
                        </div>
                      </TableCell>
                      <TableCell>-</TableCell>
                      <TableCell>
                        <Button 
                          variant="outline" 
                          size="sm" 
                          className="text-blue-600"
                          onClick={() => setIsStartExecutionModalOpen(true)}
                        >
                          开始执行
                        </Button>
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </div>
            </div>
          </div>
        );
      default:
        return renderDatasetContent();
    }
  };

  // 数据集页面内容
  const renderDatasetContent = () => (
    <div className="space-y-6">
      {/* 统计概览 */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat, index) => {
          const IconComponent = stat.icon;
          return (
            <Card key={index} className={`${stat.bgColor} hover:shadow-md transition-shadow overflow-hidden border-0`}>
              <CardContent className="p-0">
                <div className="flex items-center h-full">
                  {/* 左侧：信息区域 */}
                  <div className="p-6 flex-1">
                    <p className={`text-sm ${stat.textColor} mb-1 opacity-90`}>{stat.label}</p>
                    <p className={`text-2xl font-semibold ${stat.textColor} mb-2`}>{stat.value}</p>
                    
                    {/* 详细信息 */}
                    {(stat.subValue || stat.subValue2) && (
                      <div className="text-xs text-white/80 space-y-1">
                        {stat.subValue && (
                          <div>{stat.subLabel} {stat.subValue}</div>
                        )}
                        {stat.subValue2 && (
                          <div>{stat.subLabel2} {stat.subValue2}</div>
                        )}
                      </div>
                    )}
                  </div>
                  
                  {/* 右侧：图标区域 */}
                  <div className="p-6 flex items-center justify-center">
                    <IconComponent className={`h-6 w-6 ${stat.textColor} opacity-80`} />
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* 操作按钮和视图切换 */}
      <div className="flex justify-between items-center">
        <div className="flex space-x-4">
          <Button className="bg-blue-500 hover:bg-blue-600 text-white flex items-center space-x-2">
            <Upload className="h-4 w-4" />
            <span>上传数据集</span>
          </Button>
          <Button 
            variant="outline" 
            className="flex items-center space-x-2 hover:bg-gray-50"
            onClick={() => setIsAddDataSourceModalOpen(true)}
          >
            <Database className="h-4 w-4" />
            <span>新增数据源</span>
          </Button>
        </div>

        {/* 视图切换按钮 */}
        <div className="flex items-center space-x-2">
          {viewMode === 'list' && (
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsColumnSettingsOpen(true)}
              className="flex items-center space-x-2"
            >
              <Columns className="h-4 w-4" />
              <span>列设置</span>
            </Button>
          )}
          
          <div className="flex bg-gray-100 rounded-lg p-1">
            <Button
              variant={viewMode === 'grid' ? 'default' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('grid')}
              className="flex items-center space-x-2"
            >
              <Grid3X3 className="h-4 w-4" />
              <span>网格</span>
            </Button>
            <Button
              variant={viewMode === 'list' ? 'default' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('list')}
              className="flex items-center space-x-2"
            >
              <List className="h-4 w-4" />
              <span>列表</span>
            </Button>
          </div>
        </div>
      </div>

      {/* 数据集列表 */}
      {viewMode === 'grid' ? (
        // 网格视图
        <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
          {datasets.map((dataset) => (
            <Card key={dataset.id} className="bg-white hover:shadow-md transition-shadow">
              <CardHeader className="pb-4">
                <CardTitle className="text-lg mb-3">{dataset.title}</CardTitle>
                <p className="text-sm text-gray-600 mb-4 leading-relaxed">{dataset.description}</p>
                
                {/* 类别标签 */}
                <div className="flex flex-wrap gap-2 mb-4">
                  {dataset.categories.map((category, index) => (
                    <Badge key={index} className={`${category.color} text-xs px-3 py-1 rounded-full`}>
                      {category.name}
                    </Badge>
                  ))}
                </div>

                {/* 标签 */}
                <div className="flex flex-wrap gap-2">
                  {dataset.tags.map((tag, index) => (
                    <span key={index} className={`px-3 py-1 rounded-full text-xs border ${tag.color} border-current`}>
                      {tag.name}
                    </span>
                  ))}
                </div>
              </CardHeader>

              <CardContent className="pt-0">
                {/* 操作按钮 */}
                <div className="flex justify-center gap-6 mb-6">
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="text-blue-600 hover:bg-blue-50 flex items-center"
                    onClick={() => {
                      setSelectedDataset(dataset);
                      setIsDrawerOpen(true);
                    }}
                  >
                    <Eye className="h-4 w-4 mr-1" />
                    详情
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="text-green-600 hover:bg-green-50 flex items-center"
                    onClick={() => {
                      setSelectedDatasetForPreprocessing(dataset);
                      setTaskFormData({
                        ...taskFormData,
                        taskName: `${dataset.title}预处理任务`,
                        targetDataset: dataset.title
                      });
                      setIsCreateTaskDrawerOpen(true);
                    }}
                  >
                    <Settings className="h-4 w-4 mr-1" />
                    预处理
                  </Button>
                  <Button variant="ghost" size="sm" className="text-gray-600 hover:bg-gray-50 flex items-center">
                    <Download className="h-4 w-4 mr-1" />
                    下载
                  </Button>
                </div>

                {/* 文件信息 */}
                <div className="text-sm text-gray-600 mb-4">
                  <div className="mb-2">格式/大小: {dataset.format} / {dataset.size}</div>
                  <div className="mb-2">行数/列数: {dataset.rows} / {dataset.columns}</div>
                </div>

                {/* 数据完整度 */}
                <div className="mb-4">
                  <div className="flex items-center justify-between text-sm mb-2">
                    <span className="text-gray-600">数据完整度</span>
                    <span className="font-medium">{dataset.completeness}%</span>
                  </div>
                  <Progress value={dataset.completeness} className="h-2" />
                </div>

                {/* 数据来源 */}
                <div className="text-sm text-gray-500">
                  数据来源: {dataset.source}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        // 列表视图
        <div className="bg-white rounded-lg border">
          <Table>
            <TableHeader>
              <TableRow>
                {columnSettings.title.visible && (
                  <TableHead className="w-[200px]">数据集名称</TableHead>
                )}
                {columnSettings.description.visible && (
                  <TableHead className="w-[300px]">描述</TableHead>
                )}
                {columnSettings.categories.visible && (
                  <TableHead className="w-[150px]">类别</TableHead>
                )}
                {columnSettings.format.visible && (
                  <TableHead className="w-[100px]">格式</TableHead>
                )}
                {columnSettings.size.visible && (
                  <TableHead className="w-[100px]">大小</TableHead>
                )}
                {columnSettings.rows.visible && (
                  <TableHead className="w-[80px]">行数</TableHead>
                )}
                {columnSettings.columns.visible && (
                  <TableHead className="w-[80px]">列数</TableHead>
                )}
                {columnSettings.completeness.visible && (
                  <TableHead className="w-[120px]">完整度</TableHead>
                )}
                {columnSettings.source.visible && (
                  <TableHead className="w-[150px]">数据来源</TableHead>
                )}
                {columnSettings.actions.visible && (
                  <TableHead className="w-[200px]">操作</TableHead>
                )}
              </TableRow>
            </TableHeader>
            <TableBody>
              {datasets.map((dataset) => (
                <TableRow key={dataset.id} className="hover:bg-gray-50">
                  {columnSettings.title.visible && (
                    <TableCell className="font-medium">{dataset.title}</TableCell>
                  )}
                  {columnSettings.description.visible && (
                    <TableCell className="text-sm text-gray-600 max-w-[300px] truncate">
                      {dataset.description}
                    </TableCell>
                  )}
                  {columnSettings.categories.visible && (
                    <TableCell>
                      <div className="flex flex-wrap gap-1">
                        {dataset.categories.slice(0, 2).map((category, index) => (
                          <Badge key={index} className={`${category.color} text-xs`}>
                            {category.name}
                          </Badge>
                        ))}
                        {dataset.categories.length > 2 && (
                          <span className="text-xs text-gray-500">+{dataset.categories.length - 2}</span>
                        )}
                      </div>
                    </TableCell>
                  )}
                  {columnSettings.format.visible && (
                    <TableCell className="text-sm">{dataset.format}</TableCell>
                  )}
                  {columnSettings.size.visible && (
                    <TableCell className="text-sm">{dataset.size}</TableCell>
                  )}
                  {columnSettings.rows.visible && (
                    <TableCell className="text-sm">{dataset.rows}</TableCell>
                  )}
                  {columnSettings.columns.visible && (
                    <TableCell className="text-sm">{dataset.columns}</TableCell>
                  )}
                  {columnSettings.completeness.visible && (
                    <TableCell>
                      <div className="flex items-center space-x-2">
                        <Progress value={dataset.completeness} className="h-2 flex-1" />
                        <span className="text-sm font-medium">{dataset.completeness}%</span>
                      </div>
                    </TableCell>
                  )}
                  {columnSettings.source.visible && (
                    <TableCell className="text-sm text-gray-600">{dataset.source}</TableCell>
                  )}
                  {columnSettings.actions.visible && (
                    <TableCell>
                      <div className="flex space-x-2">
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="text-blue-600 hover:bg-blue-50"
                          onClick={() => {
                            setSelectedDataset(dataset);
                            setIsDrawerOpen(true);
                          }}
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="text-green-600 hover:bg-green-50"
                          onClick={() => {
                            setSelectedDatasetForPreprocessing(dataset);
                            setTaskFormData({
                              ...taskFormData,
                              taskName: `${dataset.title}预处理任务`,
                              targetDataset: dataset.title
                            });
                            setIsCreateTaskDrawerOpen(true);
                          }}
                        >
                          <Settings className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="sm" className="text-gray-600 hover:bg-gray-50">
                          <Download className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  )}
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      )}

      {/* 数据集详情抽屉 */}
      <Sheet open={isDrawerOpen} onOpenChange={setIsDrawerOpen}>
        <SheetContent side="right" className="w-[50vw] min-w-[600px] overflow-y-auto">
          <SheetHeader className="flex flex-row items-center justify-between pb-4 border-b">
            <SheetTitle className="text-lg">数据详情</SheetTitle>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => setIsDrawerOpen(false)}
              className="h-6 w-6 p-0"
            >
              <X className="h-4 w-4" />
            </Button>
          </SheetHeader>

          {selectedDataset && (
            <div className="space-y-6 py-4">
              {/* 数据集标题 */}
              <div>
                <h2 className="text-xl mb-6">IoT传感器</h2>
                
                {/* 顶部统计卡片 */}
                <div className="grid grid-cols-4 gap-4 mb-6">
                  <div className="text-center">
                    <div className="text-sm text-gray-500 mb-1">数据集个数</div>
                    <div className="text-2xl">125,000</div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm text-gray-500 mb-1">记录量</div>
                    <div className="text-2xl">95%</div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm text-gray-500 mb-1">数据完整度</div>
                    <div className="text-2xl">5</div>
                  </div>
                  <div className="text-center">
                    <div className="text-sm text-gray-500 mb-1">平均处理量</div>
                    <div className="text-2xl">5</div>
                  </div>
                </div>
                
                {/* Linux系统相关数据集 */}
                <div className="bg-blue-50 p-4 rounded-lg mb-6">
                  <div className="flex items-center gap-2 mb-2">
                    <Info className="h-4 w-4 text-blue-600" />
                    <span className="text-sm text-blue-800">Linux系统相关数据集</span>
                  </div>
                  <p className="text-xs text-blue-700">
                    本数据集采用Linux系统处理模式，符合Linux平台处理标准，系统数据和可分析性文档已注明，采用Linux数据平台系统自动分析处理
                  </p>
                </div>
              </div>

              {/* 数据质量概览 */}
              <div>
                <h3 className="mb-4">数据质量概览</h3>
                <div className="grid grid-cols-4 gap-6">
                  <div className="text-center">
                    <div className="text-3xl text-green-500 mb-1">95%</div>
                    <div className="text-sm text-gray-600">完整性</div>
                  </div>
                  <div className="text-center">
                    <div className="text-3xl text-blue-500 mb-1">99%</div>
                    <div className="text-sm text-gray-600">准确性</div>
                  </div>
                  <div className="text-center">
                    <div className="text-3xl text-green-500 mb-1">96%</div>
                    <div className="text-sm text-gray-600">一致性</div>
                  </div>
                  <div className="text-center">
                    <div className="text-3xl text-orange-500 mb-1">93%</div>
                    <div className="text-sm text-gray-600">时效性</div>
                  </div>
                </div>
              </div>

              {/* 数据来源配置分析 */}
              <div>
                <h3 className="mb-4">数据来源配置分析</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-yellow-50 p-4 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <AlertCircle className="h-4 w-4 text-yellow-600" />
                      <span className="text-sm">数据分析检验</span>
                    </div>
                    <p className="text-xs text-gray-600">
                      运营AI+AI判断控制策略，个智能优化算法优化判断策略，主要依靠线优
                      提升AI一些体验。
                    </p>
                  </div>
                  <div className="bg-green-50 p-4 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span className="text-sm">数据输出分析</span>
                    </div>
                    <p className="text-xs text-gray-600">
                      管理数据支本功能，同事管理系统大规模2465套最高，高端部署本
                      地BI30%。
                    </p>
                  </div>
                </div>
              </div>

              {/* 字段详情 */}
              <div>
                <h3 className="mb-4">字段详情</h3>
                <div className="grid grid-cols-3 gap-6 text-sm">
                  <div>
                    <div className="mb-4">
                      <div className="text-gray-500 mb-1">时间戳</div>
                      <div>开始：发布时间</div>
                    </div>
                    <div className="mb-4">
                      <div className="text-gray-500 mb-1">压力(MPa)</div>
                      <div>范围：6.8~12.5</div>
                    </div>
                    <div className="mb-4">
                      <div className="text-gray-500 mb-1">备注验证</div>
                      <div>是：normal, warning, error</div>
                    </div>
                  </div>
                  <div>
                    <div className="mb-4">
                      <div className="text-gray-500 mb-1">温度(°C)</div>
                      <div>范围：55.8~94.0</div>
                    </div>
                    <div className="mb-4">
                      <div className="text-gray-500 mb-1">脉冲频率(mmHg)</div>
                      <div>范围：55.8~75.8</div>
                    </div>
                  </div>
                  <div>
                    <div className="mb-4">
                      <div className="text-gray-500 mb-1">应用：振动、液油2</div>
                      <div>平均：9月2</div>
                    </div>
                    <div className="mb-4">
                      <div className="text-gray-500 mb-1">平均：2.1</div>
                    </div>
                  </div>
                </div>
              </div>

              {/* 数据操作日志 */}
              <div>
                <h3 className="mb-4">数据操作日志（最近操作记录）</h3>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>时间戳</TableHead>
                      <TableHead>温度(°C)</TableHead>
                      <TableHead>压力(MPa)</TableHead>
                      <TableHead>脉冲频率(mmHg)</TableHead>
                      <TableHead>诊断状态</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    <TableRow>
                      <TableCell>2024-01-15 14:30:00</TableCell>
                      <TableCell>42.1</TableCell>
                      <TableCell>6.2</TableCell>
                      <TableCell>2.1</TableCell>
                      <TableCell>
                        <Badge className="bg-green-100 text-green-700">normal</Badge>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>2024-01-15 14:31:00</TableCell>
                      <TableCell>43.1</TableCell>
                      <TableCell>6.4</TableCell>
                      <TableCell>2.3</TableCell>
                      <TableCell>
                        <Badge className="bg-green-100 text-green-700">normal</Badge>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>2024-01-15 14:32:00</TableCell>
                      <TableCell>41.8</TableCell>
                      <TableCell>6.1</TableCell>
                      <TableCell>1.9</TableCell>
                      <TableCell>
                        <Badge className="bg-green-100 text-green-700">normal</Badge>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>2024-01-15 14:27:00</TableCell>
                      <TableCell>44.2</TableCell>
                      <TableCell>6.8</TableCell>
                      <TableCell>2.8</TableCell>
                      <TableCell>
                        <Badge className="bg-yellow-100 text-yellow-700">warning</Badge>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>2024-01-15 14:28:00</TableCell>
                      <TableCell>40.5</TableCell>
                      <TableCell>5.9</TableCell>
                      <TableCell>1.7</TableCell>
                      <TableCell>
                        <Badge className="bg-green-100 text-green-700">normal</Badge>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>2024-01-15 14:29:00</TableCell>
                      <TableCell>42.9</TableCell>
                      <TableCell>6.3</TableCell>
                      <TableCell>2.2</TableCell>
                      <TableCell>
                        <Badge className="bg-green-100 text-green-700">normal</Badge>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>2024-01-15 14:25:00</TableCell>
                      <TableCell>41.1</TableCell>
                      <TableCell>7.2</TableCell>
                      <TableCell>3.1</TableCell>
                      <TableCell>
                        <Badge className="bg-yellow-100 text-yellow-700">warning</Badge>
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell>2024-01-15 14:23:00</TableCell>
                      <TableCell>41.2</TableCell>
                      <TableCell>6.0</TableCell>
                      <TableCell>1.8</TableCell>
                      <TableCell>
                        <Badge className="bg-green-100 text-green-700">normal</Badge>
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </div>

              {/* 业务应用标签 */}
              <div>
                <h3 className="mb-4">业务应用标签</h3>
                <div className="flex gap-3 mb-6">
                  <Badge className="bg-blue-100 text-blue-700 px-3 py-1">设备状态检测</Badge>
                  <Badge className="bg-green-100 text-green-700 px-3 py-1">预测性维护</Badge>
                  <Badge className="bg-orange-100 text-orange-700 px-3 py-1">故障预测</Badge>
                  <Badge className="bg-purple-100 text-purple-700 px-3 py-1">数据分��</Badge>
                </div>
              </div>

              {/* AI应用推荐 */}
              <div>
                <h3 className="mb-4">AI应用推荐</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-green-50 p-4 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span className="text-sm">可监控清理</span>
                    </div>
                    <p className="text-xs text-gray-600">
                      基于工业发现热磁的深度文件分析特点，自动进行分析处理，
                      故障误差率：10-20%，高检验率。
                    </p>
                  </div>
                  <div className="bg-yellow-50 p-4 rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <AlertCircle className="h-4 w-4 text-yellow-600" />
                      <span className="text-sm">自动巡检预设</span>
                    </div>
                    <p className="text-xs text-gray-600">
                      基于数据提示预测数据系统结果，支持对于现场检务情况的，
                      故障误差率：2-4%，实时。
                    </p>
                  </div>
                </div>
              </div>

              {/* 数据统计概况 */}
              <div>
                <h3 className="mb-4">数据统计概况</h3>
                <div className="grid grid-cols-3 gap-6 text-center">
                  <div>
                    <div className="text-3xl text-blue-500 mb-1">A+</div>
                    <div className="text-sm text-gray-600">数据集评级</div>
                  </div>
                  <div>
                    <div className="text-3xl text-green-500 mb-1">¥22万</div>
                    <div className="text-sm text-gray-600">加速训练费用</div>
                  </div>
                  <div>
                    <div className="text-3xl text-purple-500 mb-1">81%</div>
                    <div className="text-sm text-gray-600">处理效率</div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </SheetContent>
      </Sheet>
    </div>
  );

  return (
    <>
      <div className="space-y-6">
        {/* 二级菜单 */}
        <div className="flex gap-1 bg-gray-100 p-1 rounded-lg w-fit">
          <button
            className={`px-4 py-2 rounded-md text-sm transition-colors ${
              activeSubTab === "数据集"
                ? "bg-white text-gray-900 shadow-sm"
                : "text-gray-600 hover:text-gray-900 hover:bg-gray-50"
            }`}
            onClick={() => setActiveSubTab("数据集")}
          >
            <Database className="w-4 h-4 inline-block mr-2" />
            数据集
          </button>
          <button
            className={`px-4 py-2 rounded-md text-sm transition-colors ${
              activeSubTab === "数据预处理"
                ? "bg-white text-gray-900 shadow-sm"
                : "text-gray-600 hover:text-gray-900 hover:bg-gray-50"
            }`}
            onClick={() => setActiveSubTab("数据预处理")}
          >
            <Settings className="w-4 h-4 inline-block mr-2" />
            数据预处理
          </button>
        </div>

        {/* 主内容区域 */}
        {renderSubPageContent()}
      </div>

      {/* 开始执行确认弹窗 */}
      <Dialog open={isStartExecutionModalOpen} onOpenChange={setIsStartExecutionModalOpen}>
        <DialogContent className="sm:max-w-md p-0" aria-describedby="start-execution-description">
          <DialogHeader className="px-6 py-4 border-b">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
                <AlertTriangle className="w-5 h-5 text-orange-600" />
              </div>
              <DialogTitle>启动LimiX治理任务</DialogTitle>
            </div>
            <DialogDescription id="start-execution-description">
              确认开始执行数据治理任务
            </DialogDescription>
          </DialogHeader>

          <div className="px-6 py-6 space-y-4">
            {/* 确认文本 */}
            <p className="text-gray-900">
              确定要开始执行"ERP数据质量评估"任务吗？
            </p>

            {/* LimiX模型处理流程 */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                  <Info className="w-4 h-4 text-blue-600" />
                </div>
                <span className="font-medium text-gray-900">LimiX模型处理流程:</span>
              </div>
              
              <div className="ml-8 space-y-2">
                <div className="flex items-center gap-3">
                  <BarChart3 className="w-4 h-4 text-blue-600" />
                  <span className="text-sm text-gray-700">数据质量评估与预处理</span>
                </div>
                <div className="flex items-center gap-3">
                  <Eye className="w-4 h-4 text-blue-600" />
                  <span className="text-sm text-gray-700">智能特征分析与选择</span>
                </div>
                <div className="flex items-center gap-3">
                  <Zap className="w-4 h-4 text-blue-600" />
                  <span className="text-sm text-gray-700">AI驱动的数据治理操作</span>
                </div>
                <div className="flex items-center gap-3">
                  <TrendingUp className="w-4 h-4 text-blue-600" />
                  <span className="text-sm text-gray-700">结果验证与质量评分</span>
                </div>
              </div>
            </div>

            {/* 预计处理时间 */}
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
              <div className="flex items-center gap-2">
                <Clock className="w-4 h-4 text-blue-600" />
                <span className="text-sm font-medium text-blue-900">预计处理时间:</span>
                <span className="text-sm text-blue-800">5-15分钟</span>
              </div>
            </div>
          </div>

          {/* 底部按钮 */}
          <div className="px-6 py-4 border-t flex justify-end gap-3">
            <Button 
              variant="outline" 
              onClick={() => setIsStartExecutionModalOpen(false)}
            >
              取消
            </Button>
            <Button 
              className="bg-blue-500 hover:bg-blue-600"
              onClick={() => {
                console.log("开始执行ERP数据质量评估任务");
                setIsStartExecutionModalOpen(false);
                // 这里可以添加开始执行的逻辑
              }}
            >
              确定
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* 停止任务确认弹窗 */}
      <Dialog open={isStopTaskModalOpen} onOpenChange={setIsStopTaskModalOpen}>
        <DialogContent className="sm:max-w-md p-0" aria-describedby="stop-task-description">
          <DialogHeader className="px-6 py-4 border-b">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                <AlertTriangle className="w-5 h-5 text-red-600" />
              </div>
              <DialogTitle>停止LimiX治理任务</DialogTitle>
            </div>
            <DialogDescription id="stop-task-description">
              确认停止正在执行的数据治理任务
            </DialogDescription>
          </DialogHeader>

          <div className="px-6 py-6 space-y-4">
            {/* 确认文本 */}
            <p className="text-gray-900">
              确定要停止"客户行为数据清洗"任务吗？
            </p>

            {/* 警告信息 */}
            <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded-r-lg">
              <div className="flex items-start gap-2">
                <AlertTriangle className="w-4 h-4 text-red-600 mt-0.5" />
                <div className="space-y-1">
                  <p className="text-sm font-medium text-red-900">注意事项:</p>
                  <ul className="text-sm text-red-800 space-y-1">
                    <li>• 停止后任务进度将丢失</li>
                    <li>• 已处理的中间结果将被保留</li>
                    <li>• 可随时重新启动任务</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>

          {/* 底部按钮 */}
          <div className="px-6 py-4 border-t flex justify-end gap-3">
            <Button 
              variant="outline" 
              onClick={() => setIsStopTaskModalOpen(false)}
            >
              取消
            </Button>
            <Button 
              variant="destructive"
              onClick={() => {
                console.log("停止客户行为数据清洗任务");
                setIsStopTaskModalOpen(false);
                // 显示成功通知
                toast.success("任务已停止", {
                  description: "客户行为数据清洗任务已成功停止",
                  duration: 3000,
                });
              }}
            >
              确认停止
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* 任务详情弹窗 */}
      <Dialog open={isTaskDetailModalOpen} onOpenChange={setIsTaskDetailModalOpen}>
        <DialogContent className="sm:max-w-3xl h-[80vh] p-0 flex flex-col" aria-describedby="task-detail-description">
          <DialogHeader className="px-6 py-4 border-b">
            <div className="flex items-center gap-3">
              <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                <Info className="w-4 h-4 text-blue-600" />
              </div>
              <DialogTitle>LimiX治理任务结果</DialogTitle>
            </div>
            <DialogDescription id="task-detail-description">
              查看数据预处理任务的详细执行结果和AI模型处理报告
            </DialogDescription>
          </DialogHeader>

          <div className="px-6 py-6 space-y-6 overflow-y-auto flex-1">
            {/* LimiX模型处理完成 */}
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-center gap-3">
                <CheckCircle className="w-5 h-5 text-green-600" />
                <div>
                  <h3 className="font-medium text-green-900">LimiX模型处理完成</h3>
                  <p className="text-sm text-green-800 mt-1">
                    任务已通过LimiX AI模型完成处理，数据已自动存档，以下是详细结果报告。
                  </p>
                </div>
              </div>
            </div>

            {/* 统计数据 */}
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center p-4 bg-gray-50 rounded-lg">
                <div className="text-2xl font-medium text-green-600 mb-1">9%</div>
                <div className="text-sm text-gray-600">数据质量提升</div>
              </div>
              <div className="text-center p-4 bg-gray-50 rounded-lg">
                <div className="text-2xl font-medium text-gray-900 mb-1">29337</div>
                <div className="text-sm text-gray-600">处理记录数</div>
              </div>
            </div>

            {/* 数据自动存档 */}
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
              <div className="flex items-start gap-3">
                <CheckCircle className="w-5 h-5 text-blue-600 mt-0.5" />
                <div>
                  <h4 className="font-medium text-blue-900 mb-1">数据已自动存档</h4>
                  <p className="text-sm text-blue-800">
                    治理后的数据集"生产线传感器数据集_治理后_v2025.9"已自动保存到数据存档，可在存档页
                    面查看和使用。
                  </p>
                </div>
              </div>
            </div>

            {/* 任务详情 */}
            <div className="space-y-3">
              <h3 className="font-medium">任务详情</h3>
              <div className="space-y-2 text-sm">
                <div className="flex items-center gap-2">
                  <span className="text-gray-600">任务名称:</span>
                  <span>传感器数据清洗</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-gray-600">数据集:</span>
                  <span>生产线传感器数据集</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-gray-600">执行时间:</span>
                  <span>2024-01-15 09:00:00 - 2024-01-15 09:45:00</span>
                </div>
              </div>
            </div>

            {/* LimiX执行操作 */}
            <div className="space-y-3">
              <h3 className="font-medium">LimiX执行操作</h3>
              <div className="flex gap-4">
                <Button variant="outline" size="sm" className="text-blue-600 border-blue-200">
                  异常值检测
                </Button>
                <Button variant="outline" size="sm" className="text-blue-600 border-blue-200">
                  缺失值填充
                </Button>
                <Button variant="outline" size="sm" className="text-blue-600 border-blue-200">
                  数据标准化
                </Button>
              </div>
            </div>

            {/* 处理结果统计 */}
            <div className="space-y-3">
              <h3 className="font-medium">处理结果统计</h3>
              <div className="space-y-2 text-sm">
                <div className="flex items-center gap-2">
                  <span className="w-2 h-2 rounded-full bg-green-500"></span>
                  <span>异常数据清洗：470条</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="w-2 h-2 rounded-full bg-blue-500"></span>
                  <span>智能特征生成：7个新特征</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="w-2 h-2 rounded-full bg-orange-500"></span>
                  <span>属性重复度：0.851</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="w-2 h-2 rounded-full bg-purple-500"></span>
                  <span>数据完整度：0.971</span>
                </div>
              </div>
            </div>

            {/* LimiX建议 */}
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
              <div className="flex items-start gap-3">
                <Info className="w-5 h-5 text-blue-600 mt-0.5" />
                <div>
                  <h4 className="font-medium text-blue-900 mb-1">LimiX建议</h4>
                  <p className="text-sm text-blue-800">
                    建议设置信的数据集用于预测传者数据学习模型，预期可提升模型准确率15-25%。
                  </p>
                </div>
              </div>
            </div>

            {/* 业务流程自动化 */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Settings className="w-5 h-5 text-gray-600" />
                <h3 className="font-medium">业务流程自动化</h3>
              </div>
              
              <div className="space-y-3 ml-7">
                <div className="space-y-2">
                  <h4 className="text-sm font-medium">已完成:</h4>
                  <div className="space-y-1 text-sm">
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4 text-green-600" />
                      <span>数据治理流程执行完成</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4 text-green-600" />
                      <span>治理后数据集已自动存档</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4 text-green-600" />
                      <span>自动添加质量标签和操作流程</span>
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <h4 className="text-sm font-medium">下一步:</h4>
                  <div className="space-y-1 text-sm">
                    <div className="flex items-center gap-2">
                      <AlertCircle className="w-4 h-4 text-orange-600" />
                      <span>新建"数据验证"项目集中查看新的数据集</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <AlertCircle className="w-4 h-4 text-orange-600" />
                      <span>使用高质数据模型进行深度健康分析</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <AlertCircle className="w-4 h-4 text-orange-600" />
                      <span>继续对其他待治理的数据集</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="text-sm text-gray-600 mt-4 p-3 bg-gray-50 rounded">
                建议立即将治理数据存档保持可用面查看和使用新数据集
              </div>
            </div>
          </div>

          {/* 底部按钮 */}
          <div className="px-6 py-4 border-t flex justify-end flex-shrink-0">
            <Button 
              className="bg-blue-500 hover:bg-blue-600"
              onClick={() => setIsTaskDetailModalOpen(false)}
            >
              知道了
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* 创建预处理任务抽屉 */}
      <Drawer open={isCreateTaskDrawerOpen} onOpenChange={setIsCreateTaskDrawerOpen}>
        <DrawerContent className="h-[90vh] max-w-4xl mx-auto">
          <DrawerHeader className="px-6 py-4 border-b">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                  <Settings className="w-4 h-4 text-blue-600" />
                </div>
                <div>
                  <DrawerTitle>Limix智能数据治理工作台</DrawerTitle>
                  <div className="flex items-center gap-2 mt-1">
                    <Badge variant="secondary" className="bg-blue-100 text-blue-700">AI微调</Badge>
                  </div>
                </div>
              </div>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => {
                  setIsCreateTaskDrawerOpen(false);
                  setSelectedDatasetForPreprocessing(null);
                  // 重置表单
                  setTaskFormData({
                    taskName: "",
                    priority: "",
                    targetDataset: "",
                    governanceOperations: [],
                    qualityThreshold: "85",
                    sampleSize: "10000",
                    automationLevel: "",
                    enableFineTuning: false,
                    saveIntermediateResults: false,
                    maxExecutionTime: "2"
                  });
                }}
                className="h-8 w-8 p-0"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </DrawerHeader>

          <div className="p-6 overflow-y-auto">
            <div className="space-y-6">
              {/* 智能治理引擎介绍 */}
              <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
                <div className="flex items-start gap-3">
                  <Info className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="font-medium text-blue-900 mb-1">🛠️ LimixAI智能治理引擎</h4>
                    <p className="text-sm text-blue-800">
                      基于大规模的机器学习方法，提供自动化数据清洗算法、特征工程、异常检测等智能治理服务，大幅提升数据质量和分析效率。
                    </p>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-8">
                {/* 左侧配置区域 */}
                <div className="space-y-6">
                  {/* 任务命名 */}
                  <div className="space-y-3">
                    <Label className="text-base font-medium">任务命名</Label>
                    <Input
                      placeholder="请输入任务名称"
                      value={taskFormData.taskName}
                      onChange={(e) => setTaskFormData({...taskFormData, taskName: e.target.value})}
                    />
                  </div>

                  {/* 任务优先级 */}
                  <div className="space-y-3">
                    <Label className="text-base font-medium">任务优先级</Label>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
                      <span className="text-sm">中等优先级</span>
                    </div>
                  </div>

                  {/* 目标数据集 */}
                  <div className="space-y-3">
                    <Label className="text-base font-medium">目标数据集</Label>
                    {selectedDatasetForPreprocessing ? (
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                        <div className="font-medium text-blue-900">{selectedDatasetForPreprocessing.title}</div>
                        <div className="text-sm text-blue-700 mt-1">{selectedDatasetForPreprocessing.description}</div>
                        <div className="flex gap-4 text-sm mt-2">
                          <span className="text-blue-600">{selectedDatasetForPreprocessing.format}</span>
                          <span className="text-green-600">{selectedDatasetForPreprocessing.rows}条</span>
                          <span className="text-orange-600">质量{selectedDatasetForPreprocessing.completeness}%</span>
                        </div>
                      </div>
                    ) : (
                      <>
                        <Select value={taskFormData.targetDataset} onValueChange={(value) => setTaskFormData({...taskFormData, targetDataset: value})}>
                          <SelectTrigger>
                            <SelectValue placeholder="生产线传感器数据集" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="sensor-data">生产线传感器数据集</SelectItem>
                            <SelectItem value="defect-data">设备缺陷记录集</SelectItem>
                            <SelectItem value="erp-data">ERP系统数据</SelectItem>
                          </SelectContent>
                        </Select>
                        
                        <div className="flex gap-4 text-sm">
                          <span className="text-blue-600">IoT传感器</span>
                          <span className="text-green-600">125,000条</span>
                          <span className="text-orange-600">质量85%</span>
                        </div>
                      </>
                    )}
                  </div>

                  {/* 数据质量分析 */}
                  <div className="space-y-4">
                    <h3 className="text-base font-medium flex items-center gap-2">
                      📊 数据质量分析
                    </h3>
                    
                    <div className="grid grid-cols-3 gap-4 text-sm">
                      <div className="text-center">
                        <div className="text-2xl text-red-500 mb-1">
                          {selectedDatasetForPreprocessing ? `${100 - selectedDatasetForPreprocessing.completeness}%` : "12.5%"}
                        </div>
                        <div className="text-gray-600">缺失值比例</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl text-orange-500 mb-1">3.2%</div>
                        <div className="text-gray-600">异常值比例</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl text-green-500 mb-1">
                          {selectedDatasetForPreprocessing ? `${selectedDatasetForPreprocessing.completeness}%` : "87.8%"}
                        </div>
                        <div className="text-gray-600">数据一致性</div>
                      </div>
                    </div>
                  </div>

                  {/* Limix智能治理操作 */}
                  <div className="space-y-4">
                    <h3 className="text-base font-medium flex items-center gap-2">
                      🧠 Limix智能治理操作
                    </h3>
                    
                    <div className="space-y-2">
                      <Label className="text-sm text-gray-600">选择治理操作</Label>
                      <div className="text-xs text-gray-500 mb-2">请选择LimixAI智能治理操作</div>
                    </div>

                    <div className="grid grid-cols-3 gap-4 text-sm">
                      <div>
                        <Label className="text-sm">质量阈值</Label>
                        <div className="flex items-center gap-2">
                          <Input
                            value={taskFormData.qualityThreshold}
                            onChange={(e) => setTaskFormData({...taskFormData, qualityThreshold: e.target.value})}
                            className="w-16 h-8 text-sm"
                          />
                          <span>%</span>
                        </div>
                      </div>
                      <div>
                        <Label className="text-sm">样本大小</Label>
                        <Input
                          value={taskFormData.sampleSize}
                          onChange={(e) => setTaskFormData({...taskFormData, sampleSize: e.target.value})}
                          className="h-8 text-sm"
                        />
                      </div>
                      <div>
                        <Label className="text-sm">自动化</Label>
                        <Select value={taskFormData.automationLevel} onValueChange={(value) => setTaskFormData({...taskFormData, automationLevel: value})}>
                          <SelectTrigger className="h-8 text-sm">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="full">完全自动化</SelectItem>
                            <SelectItem value="semi">半自动化</SelectItem>
                            <SelectItem value="manual">手动模式</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>
                </div>

                {/* 右侧预期效果和高级配置 */}
                <div className="space-y-6">
                  {/* 预期治理效果 */}
                  <div className="space-y-4">
                    <h3 className="text-base font-medium flex items-center gap-2">
                      📈 预期治理效果
                    </h3>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <h4 className="text-sm font-medium">治理前</h4>
                        <div className="space-y-2 text-xs">
                          <div className="flex justify-between">
                            <span className="text-gray-600">数据质量:</span>
                            <span className="text-orange-600">72%</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">缺失值:</span>
                            <span className="text-red-600">12.5%</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">异常值:</span>
                            <span className="text-orange-600">3.4%</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">特征数:</span>
                            <span className="text-gray-600">15个</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="space-y-3">
                        <h4 className="text-sm font-medium">治理后（预期）</h4>
                        <div className="space-y-2 text-xs">
                          <div className="flex justify-between">
                            <span className="text-gray-600">数据质量:</span>
                            <span className="text-green-600">95%</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">缺失值:</span>
                            <span className="text-green-600">0%</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">异常值:</span>
                            <span className="text-green-600">0%</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">特征数:</span>
                            <span className="text-blue-600">12个 (优化后)</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* 高级配置 */}
                  <div className="space-y-4">
                    <h3 className="text-base font-medium flex items-center gap-2">
                      ⚙️ 高级配置
                    </h3>
                    
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <Label className="text-sm">启用微调模式</Label>
                          <Select value={taskFormData.enableFineTuning ? "enabled" : "disabled"} onValueChange={(value) => setTaskFormData({...taskFormData, enableFineTuning: value === "enabled"})}>
                            <SelectTrigger className="h-8 text-sm">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="enabled">启用</SelectItem>
                              <SelectItem value="disabled">禁用</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div>
                          <Label className="text-sm">保存中间结果</Label>
                          <Select value={taskFormData.saveIntermediateResults ? "enabled" : "disabled"} onValueChange={(value) => setTaskFormData({...taskFormData, saveIntermediateResults: value === "enabled"})}>
                            <SelectTrigger className="h-8 text-sm">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="enabled">启用</SelectItem>
                              <SelectItem value="disabled">禁用</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Label className="text-sm">完成通知邮箱</Label>
                        <Input placeholder="请输入您希望接收通知的邮箱" className="h-8 text-sm" />
                      </div>

                      <div className="space-y-2">
                        <Label className="text-sm">最大执行时间(小时)</Label>
                        <Input
                          value={taskFormData.maxExecutionTime}
                          onChange={(e) => setTaskFormData({...taskFormData, maxExecutionTime: e.target.value})}
                          className="h-8 text-sm"
                        />
                      </div>
                    </div>
                  </div>

                  {/* 任务描述 */}
                  <div className="space-y-3">
                    <Label className="text-base font-medium">任务描述</Label>
                    <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded">
                      {selectedDatasetForPreprocessing 
                        ? `自动对"${selectedDatasetForPreprocessing.title}"进行智能治理，包括缺失值处理、异常值检测和特征优化，提升数据质量至95%以上。`
                        : "自动对生产线传感器数据进行智能治理，包括缺失值处理、异常值检测和特征优化，提升数据质量至95%以上。"
                      }
                    </div>
                  </div>
                </div>
              </div>

              {/* 底部按钮 */}
              <div className="flex justify-end gap-3 pt-4 border-t">
                <Button 
                  variant="outline" 
                  onClick={() => {
                    setIsCreateTaskDrawerOpen(false);
                    setSelectedDatasetForPreprocessing(null);
                    // 重置表单
                    setTaskFormData({
                      taskName: "",
                      priority: "",
                      targetDataset: "",
                      governanceOperations: [],
                      qualityThreshold: "85",
                      sampleSize: "10000",
                      automationLevel: "",
                      enableFineTuning: false,
                      saveIntermediateResults: false,
                      maxExecutionTime: "2"
                    });
                  }}
                >
                  取消
                </Button>
                <Button 
                  className="bg-blue-500 hover:bg-blue-600"
                  onClick={selectedDatasetForPreprocessing ? handleCreateTaskAndNavigate : () => {
                    console.log("创建预处理任务:", taskFormData);
                    setIsCreateTaskDrawerOpen(false);
                  }}
                >
                  {selectedDatasetForPreprocessing ? "创建任务并跳转" : "创建任务"}
                </Button>
              </div>
            </div>
          </div>
        </DrawerContent>
      </Drawer>

      {/* 新增数据源弹窗 */}
      <Dialog open={isAddDataSourceModalOpen} onOpenChange={setIsAddDataSourceModalOpen}>
        <DialogContent className="sm:max-w-[600px] p-0" aria-describedby="datasource-dialog-description">
          <DialogHeader className="px-6 py-4 border-b">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Database className="h-5 w-5 text-blue-600" />
                <DialogTitle>新增数据源</DialogTitle>
              </div>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={handleCancelDataSource}
                className="h-6 w-6 p-0"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex items-center gap-2 text-blue-600">
              <span className="text-sm">支持多种数据源类型</span>
            </div>
          </DialogHeader>
          
          <div className="px-6 py-4 space-y-6">
            {/* 智能数据接入提示 */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <Info className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-blue-900 mb-1">🚀 LimiX智能数据接入</h4>
                  <p className="text-sm text-blue-800">
                    支持MySQL、PostgreSQL、Oracle、CSV、Excel、JSON、API、MQTT等多种数据源，提供智能配置向导和实时连接测试。
                  </p>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-6">
              {/* 数据源名称 */}
              <div className="space-y-2">
                <Label htmlFor="dataSourceName" className="text-sm flex items-center gap-1">
                  <span className="text-red-500">*</span>
                  数据源名称
                </Label>
                <Input
                  id="dataSourceName"
                  placeholder="请输入数据源名称"
                  value={dataSourceFormData.name}
                  onChange={(e) => setDataSourceFormData({...dataSourceFormData, name: e.target.value})}
                  className="h-10"
                />
              </div>

              {/* 数据源类型 */}
              <div className="space-y-2">
                <Label className="text-sm flex items-center gap-1">
                  <span className="text-red-500">*</span>
                  数据源类型
                </Label>
                <Select 
                  value={dataSourceFormData.type} 
                  onValueChange={(value) => setDataSourceFormData({...dataSourceFormData, type: value})}
                >
                  <SelectTrigger className="h-10">
                    <SelectValue placeholder="请选择数据源类型" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="mysql">MySQL</SelectItem>
                    <SelectItem value="postgresql">PostgreSQL</SelectItem>
                    <SelectItem value="oracle">Oracle</SelectItem>
                    <SelectItem value="csv">CSV文件</SelectItem>
                    <SelectItem value="excel">Excel文件</SelectItem>
                    <SelectItem value="json">JSON文件</SelectItem>
                    <SelectItem value="api">REST API</SelectItem>
                    <SelectItem value="mqtt">MQTT</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* 数据源描述 */}
            <div className="space-y-2">
              <Label htmlFor="dataSourceDescription" className="text-sm">
                数据源描述
              </Label>
              <textarea
                id="dataSourceDescription"
                placeholder="请输入数据源的详细描述，包括数据内容、用途等信息"
                value={dataSourceFormData.description}
                onChange={(e) => setDataSourceFormData({...dataSourceFormData, description: e.target.value})}
                className="w-full h-20 px-3 py-2 border border-gray-300 rounded-md text-sm resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            {/* 高级配置 */}
            <div className="space-y-4">
              <Label className="text-base font-medium">高级配置</Label>
              
              <div className="grid grid-cols-3 gap-4">
                {/* 自动同步 */}
                <div className="space-y-2">
                  <Label className="text-sm">自动同步</Label>
                  <Select 
                    value={dataSourceFormData.autoSync} 
                    onValueChange={(value) => setDataSourceFormData({...dataSourceFormData, autoSync: value})}
                  >
                    <SelectTrigger className="h-10">
                      <SelectValue placeholder="" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="enabled">启用</SelectItem>
                      <SelectItem value="disabled">禁用</SelectItem>
                      <SelectItem value="scheduled">定时同步</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* 数据保留天数 */}
                <div className="space-y-2">
                  <Label className="text-sm">数据保留(天)</Label>
                  <Input
                    type="number"
                    value={dataSourceFormData.retentionDays}
                    onChange={(e) => setDataSourceFormData({...dataSourceFormData, retentionDays: e.target.value})}
                    className="h-10"
                  />
                </div>

                {/* 优先级 */}
                <div className="space-y-2">
                  <Label className="text-sm">优先级</Label>
                  <Select 
                    value={dataSourceFormData.priority} 
                    onValueChange={(value) => setDataSourceFormData({...dataSourceFormData, priority: value})}
                  >
                    <SelectTrigger className="h-10">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="高">高</SelectItem>
                      <SelectItem value="中">中</SelectItem>
                      <SelectItem value="低">低</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          </div>

          {/* 底部按钮 */}
          <div className="px-6 py-4 border-t flex justify-end space-x-3">
            <Button variant="outline" onClick={handleCancelDataSource}>
              取消
            </Button>
            <Button 
              onClick={handleAddDataSource}
              className="bg-blue-500 hover:bg-blue-600 text-white flex items-center gap-2"
              disabled={!dataSourceFormData.name || !dataSourceFormData.type}
            >
              <Database className="h-4 w-4" />
              创建数据源
            </Button>
          </div>
          
          <DialogDescription id="datasource-dialog-description" className="sr-only">
            新增数据源配置表单，支持多种数据源类型
          </DialogDescription>
        </DialogContent>
      </Dialog>

      {/* 列设置弹窗 */}
      <Dialog open={isColumnSettingsOpen} onOpenChange={setIsColumnSettingsOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>列设置</DialogTitle>
            <DialogDescription>
              自定义表格列的显示和排序
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {Object.entries(columnSettings)
              .sort(([, a], [, b]) => a.order - b.order)
              .map(([key, setting]) => {
                const columnNames: Record<string, string> = {
                  title: '数据集名称',
                  description: '描述',
                  categories: '类别',
                  format: '格式',
                  size: '大小',
                  rows: '行数',
                  columns: '列数',
                  completeness: '完整度',
                  source: '数据来源',
                  actions: '操作'
                };
                
                return (
                  <div key={key} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Checkbox
                        checked={setting.visible}
                        onCheckedChange={(checked) => {
                          setColumnSettings(prev => ({
                            ...prev,
                            [key]: { ...prev[key as keyof typeof prev], visible: !!checked }
                          }));
                        }}
                      />
                      <span className="text-sm font-medium">{columnNames[key]}</span>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          const entries = Object.entries(columnSettings);
                          const currentIndex = entries.findIndex(([k]) => k === key);
                          if (currentIndex > 0) {
                            const newSettings = { ...columnSettings };
                            const temp = newSettings[key as keyof typeof newSettings].order;
                            newSettings[key as keyof typeof newSettings].order = entries[currentIndex - 1][1].order;
                            newSettings[entries[currentIndex - 1][0] as keyof typeof newSettings].order = temp;
                            setColumnSettings(newSettings);
                          }
                        }}
                        disabled={Object.entries(columnSettings).sort(([, a], [, b]) => a.order - b.order)[0][0] === key}
                      >
                        ↑
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          const entries = Object.entries(columnSettings);
                          const currentIndex = entries.findIndex(([k]) => k === key);
                          if (currentIndex < entries.length - 1) {
                            const newSettings = { ...columnSettings };
                            const temp = newSettings[key as keyof typeof newSettings].order;
                            newSettings[key as keyof typeof newSettings].order = entries[currentIndex + 1][1].order;
                            newSettings[entries[currentIndex + 1][0] as keyof typeof newSettings].order = temp;
                            setColumnSettings(newSettings);
                          }
                        }}
                        disabled={Object.entries(columnSettings).sort(([, a], [, b]) => a.order - b.order)[Object.entries(columnSettings).length - 1][0] === key}
                      >
                        ↓
                      </Button>
                    </div>
                  </div>
                );
              })}
          </div>
          
          <div className="flex justify-end space-x-2 pt-4">
            <Button
              variant="outline"
              onClick={() => {
                // 重置为默认设置
                setColumnSettings({
                  title: { visible: true, order: 0 },
                  description: { visible: true, order: 1 },
                  categories: { visible: true, order: 2 },
                  format: { visible: true, order: 3 },
                  size: { visible: true, order: 4 },
                  rows: { visible: true, order: 5 },
                  columns: { visible: true, order: 6 },
                  completeness: { visible: true, order: 7 },
                  source: { visible: true, order: 8 },
                  actions: { visible: true, order: 9 }
                });
              }}
            >
              重置
            </Button>
            <Button onClick={() => setIsColumnSettingsOpen(false)}>
              确定
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Textarea } from "./ui/textarea";
import { Badge } from "./ui/badge";
import { Checkbox } from "./ui/checkbox";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "./ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "./ui/table";
import { 
  Plus, 
  Edit, 
  Trash2, 
  Shield, 
  Users, 
  Settings,
  Search,
  Eye,
  AlertTriangle,
  CheckCircle,
  XCircle,
  MoreHorizontal,
  UserPlus,
  Copy
} from "lucide-react";

interface Permission {
  id: string;
  name: string;
  description: string;
  module: string;
}

interface Role {
  id: string;
  name: string;
  description: string;
  permissions: string[];
  userCount: number;
  status: "active" | "inactive";
  createdAt: string;
  updatedAt?: string;
  createdBy?: string;
}

interface OperationLog {
  id: string;
  action: string;
  target: string;
  operator: string;
  timestamp: string;
  details: string;
}

interface PermissionTemplate {
  id: string;
  name: string;
  description: string;
  permissions: string[];
}

interface User {
  id: string;
  name: string;
  email: string;
  department: string;
  status: "active" | "inactive";
  roles: string[];
  createdAt: string;
}

interface UserRoleAssignment {
  userId: string;
  roleId: string;
  assignedBy: string;
  assignedAt: string;
}

const allPermissions: Permission[] = [
  { id: "project_view", name: "查看项目", description: "可以查看项目列表和详情", module: "项目管理" },
  { id: "project_create", name: "创建项目", description: "可以创建新项目", module: "项目管理" },
  { id: "project_edit", name: "编辑项目", description: "可以编辑项目信息", module: "项目管理" },
  { id: "project_delete", name: "删除项目", description: "可以删除项目", module: "项目管理" },
  { id: "data_view", name: "查看数据", description: "可以查看数据集", module: "数据管理" },
  { id: "data_upload", name: "上传数据", description: "可以上传数据集", module: "数据管理" },
  { id: "data_edit", name: "编辑数据", description: "可以编辑数据集", module: "数据管理" },
  { id: "data_delete", name: "删除数据", description: "可以删除数据集", module: "数据管理" },
  { id: "task_view", name: "查看任务", description: "可以查看任务列表", module: "任务管理" },
  { id: "task_create", name: "创建任务", description: "可以创建新任务", module: "任务管理" },
  { id: "task_edit", name: "编辑任务", description: "可以编辑任务", module: "任务管理" },
  { id: "task_delete", name: "删除任务", description: "可以删除任务", module: "任务管理" },
  { id: "model_view", name: "查看模型", description: "可以查看模型列表", module: "模型管理" },
  { id: "model_train", name: "训练模型", description: "可以训练和微调模型", module: "模型管理" },
  { id: "model_deploy", name: "部署模型", description: "可以部署模型", module: "模型管理" },
  { id: "system_manage", name: "系统管理", description: "可以管理系统设置", module: "系统管理" }
];

export function RoleManagement() {
  const [roles, setRoles] = useState<Role[]>([
    {
      id: "1",
      name: "系统管理员",
      description: "拥有系统所有权限的超级管理员",
      permissions: allPermissions.map(p => p.id),
      userCount: 2,
      status: "active",
      createdAt: "2024-01-15",
      updatedAt: "2024-01-15",
      createdBy: "系统"
    },
    {
      id: "2", 
      name: "项目经理",
      description: "负责项目管理和团队协调",
      permissions: ["project_view", "project_create", "project_edit", "task_view", "task_create", "task_edit"],
      userCount: 5,
      status: "active",
      createdAt: "2024-01-16",
      updatedAt: "2024-01-16",
      createdBy: "管理员"
    },
    {
      id: "3",
      name: "数据分析师", 
      description: "专注于数据分析和模型开发",
      permissions: ["data_view", "data_upload", "data_edit", "model_view", "model_train"],
      userCount: 8,
      status: "active",
      createdAt: "2024-01-17",
      updatedAt: "2024-01-17",
      createdBy: "管理员"
    }
  ]);

  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isPermissionDialogOpen, setIsPermissionDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isUserAssignDialogOpen, setIsUserAssignDialogOpen] = useState(false);
  const [isLogDialogOpen, setIsLogDialogOpen] = useState(false);
  const [selectedRole, setSelectedRole] = useState<Role | null>(null);
  const [selectedRoles, setSelectedRoles] = useState<string[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [operationLogs, setOperationLogs] = useState<OperationLog[]>([]);
  const [statusFilter, setStatusFilter] = useState<"all" | "active" | "inactive">("all");
  const [isPermissionTemplateDialogOpen, setIsPermissionTemplateDialogOpen] = useState(false);
  const [isPermissionPreviewDialogOpen, setIsPermissionPreviewDialogOpen] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<PermissionTemplate | null>(null);

  // 用户关联管理相关状态
  const [isBatchUserAssignDialogOpen, setIsBatchUserAssignDialogOpen] = useState(false);
  const [isUserRoleManagementDialogOpen, setIsUserRoleManagementDialogOpen] = useState(false);
  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);
  const [userSearchTerm, setUserSearchTerm] = useState("");
  const [selectedRoleForAssignment, setSelectedRoleForAssignment] = useState<Role | null>(null);

  const [formData, setFormData] = useState({
    name: "",
    description: "",
    permissions: [] as string[]
  });

  // 权限模板
  const permissionTemplates: PermissionTemplate[] = [
    {
      id: "admin",
      name: "系统管理员模板",
      description: "拥有所有系统权限",
      permissions: allPermissions.map(p => p.id)
    },
    {
      id: "project_manager",
      name: "项目经理模板",
      description: "项目管理相关权限",
      permissions: ["project_view", "project_create", "project_edit", "task_view", "task_create", "task_edit", "data_view"]
    },
    {
      id: "data_analyst",
      name: "数据分析师模板",
      description: "数据分析和模型相关权限",
      permissions: ["data_view", "data_upload", "data_edit", "model_view", "model_train", "task_view"]
    },
    {
      id: "viewer",
      name: "只读用户模板",
      description: "只能查看，无编辑权限",
      permissions: ["project_view", "data_view", "task_view", "model_view"]
    }
  ];

  // 用户数据
  const [users, setUsers] = useState<User[]>([
    {
      id: "user_1",
      name: "张三",
      email: "zhangsan@company.com",
      department: "技术部",
      status: "active",
      roles: ["1"],
      createdAt: "2024-01-15"
    },
    {
      id: "user_2", 
      name: "李四",
      email: "lisi@company.com",
      department: "产品部",
      status: "active",
      roles: ["2"],
      createdAt: "2024-01-16"
    },
    {
      id: "user_3",
      name: "王五",
      email: "wangwu@company.com", 
      department: "数据部",
      status: "active",
      roles: ["3"],
      createdAt: "2024-01-17"
    },
    {
      id: "user_4",
      name: "赵六",
      email: "zhaoliu@company.com",
      department: "运营部", 
      status: "inactive",
      roles: [],
      createdAt: "2024-01-18"
    }
  ]);

  // 用户角色分配记录
  const [userRoleAssignments, setUserRoleAssignments] = useState<UserRoleAssignment[]>([
    {
      userId: "user_1",
      roleId: "1", 
      assignedBy: "系统管理员",
      assignedAt: "2024-01-15 10:00:00"
    },
    {
      userId: "user_2",
      roleId: "2",
      assignedBy: "系统管理员", 
      assignedAt: "2024-01-16 14:30:00"
    },
    {
      userId: "user_3", 
      roleId: "3",
      assignedBy: "系统管理员",
      assignedAt: "2024-01-17 09:15:00"
    }
  ]);

  // 添加操作日志
  const addLog = (action: string, target: string, details: string) => {
    const log: OperationLog = {
      id: Date.now().toString(),
      action,
      target,
      operator: "当前用户", // 实际应用中应该从用户上下文获取
      timestamp: new Date().toLocaleString(),
      details
    };
    setOperationLogs(prev => [log, ...prev]);
  };

  const handleCreateRole = () => {
    const newRole: Role = {
      id: Date.now().toString(),
      name: formData.name,
      description: formData.description,
      permissions: formData.permissions,
      userCount: 0,
      status: "active",
      createdAt: new Date().toISOString().split('T')[0],
      updatedAt: new Date().toISOString().split('T')[0],
      createdBy: "当前用户"
    };
    
    setRoles([...roles, newRole]);
    addLog("创建角色", formData.name, `创建了新角色：${formData.name}，包含${formData.permissions.length}个权限`);
    setFormData({ name: "", description: "", permissions: [] });
    setIsCreateDialogOpen(false);
  };

  const handleEditRole = () => {
    if (!selectedRole) return;
    
    const updatedRole = {
      ...selectedRole,
      ...formData,
      updatedAt: new Date().toISOString().split('T')[0]
    };
    
    setRoles(roles.map(role => 
      role.id === selectedRole.id ? updatedRole : role
    ));
    
    addLog("编辑角色", selectedRole.name, `更新了角色信息，权限数量：${formData.permissions.length}`);
    setFormData({ name: "", description: "", permissions: [] });
    setIsEditDialogOpen(false);
    setSelectedRole(null);
  };

  const handleDeleteRole = () => {
    if (!selectedRole) return;
    
    if (selectedRole.userCount > 0) {
      alert(`无法删除角色"${selectedRole.name}"，该角色下还有${selectedRole.userCount}个用户。请先移除所有用户后再删除。`);
      return;
    }
    
    setRoles(roles.filter(role => role.id !== selectedRole.id));
    addLog("删除角色", selectedRole.name, `删除了角色：${selectedRole.name}`);
    setIsDeleteDialogOpen(false);
    setSelectedRole(null);
  };

  const handleToggleRoleStatus = (role: Role) => {
    const newStatus = role.status === "active" ? "inactive" : "active";
    setRoles(roles.map(r => 
      r.id === role.id 
        ? { ...r, status: newStatus, updatedAt: new Date().toISOString().split('T')[0] }
        : r
    ));
    addLog("状态变更", role.name, `将角色状态变更为：${newStatus === "active" ? "启用" : "停用"}`);
  };

  const handleBatchDelete = () => {
    const rolesToDelete = roles.filter(role => selectedRoles.includes(role.id));
    const hasUsersRoles = rolesToDelete.filter(role => role.userCount > 0);
    
    if (hasUsersRoles.length > 0) {
      alert(`以下角色下还有用户，无法删除：${hasUsersRoles.map(r => r.name).join(", ")}`);
      return;
    }
    
    setRoles(roles.filter(role => !selectedRoles.includes(role.id)));
    addLog("批量删除", "多个角色", `批量删除了${selectedRoles.length}个角色`);
    setSelectedRoles([]);
  };

  const openEditDialog = (role: Role) => {
    setSelectedRole(role);
    setFormData({
      name: role.name,
      description: role.description,
      permissions: [...role.permissions]
    });
    setIsEditDialogOpen(true);
  };

  const openPermissionDialog = (role: Role) => {
    setSelectedRole(role);
    setIsPermissionDialogOpen(true);
  };

  const handlePermissionChange = (permissionId: string, checked: boolean) => {
    if (checked) {
      setFormData({
        ...formData,
        permissions: [...formData.permissions, permissionId]
      });
    } else {
      setFormData({
        ...formData,
        permissions: formData.permissions.filter(id => id !== permissionId)
      });
    }
  };

  // 应用权限模板
  const applyPermissionTemplate = (template: PermissionTemplate) => {
    setFormData({
      ...formData,
      permissions: [...template.permissions]
    });
    addLog("应用权限模板", template.name, `应用了权限模板：${template.name}，包含${template.permissions.length}个权限`);
    setIsPermissionTemplateDialogOpen(false);
  };

  // 批量权限操作
  const handleBatchPermissionChange = (modulePermissions: string[], action: "select" | "deselect") => {
    if (action === "select") {
      const newPermissions = [...new Set([...formData.permissions, ...modulePermissions])];
      setFormData({
        ...formData,
        permissions: newPermissions
      });
    } else {
      setFormData({
        ...formData,
        permissions: formData.permissions.filter(id => !modulePermissions.includes(id))
      });
    }
  };

  // 权限预览
  const openPermissionPreview = () => {
    setIsPermissionPreviewDialogOpen(true);
  };

  // 用户关联管理函数
  const handleAssignRoleToUser = (userId: string, roleId: string) => {
    // 检查用户是否已有该角色
    const user = users.find(u => u.id === userId);
    if (user && user.roles.includes(roleId)) {
      alert("用户已拥有该角色");
      return;
    }

    // 更新用户角色
    setUsers(prev => prev.map(user => 
      user.id === userId 
        ? { ...user, roles: [...user.roles, roleId] }
        : user
    ));

    // 添加分配记录
    const newAssignment: UserRoleAssignment = {
      userId,
      roleId,
      assignedBy: "当前用户",
      assignedAt: new Date().toLocaleString()
    };
    setUserRoleAssignments(prev => [...prev, newAssignment]);

    // 更新角色的用户数量
    setRoles(prev => prev.map(role => 
      role.id === roleId 
        ? { ...role, userCount: role.userCount + 1 }
        : role
    ));

    // 记录日志
    const roleName = roles.find(r => r.id === roleId)?.name || roleId;
    const userName = users.find(u => u.id === userId)?.name || userId;
    addLog("角色分配", `角色: ${roleName}`, `为用户 ${userName} 分配角色 ${roleName}`);
  };

  const handleRemoveRoleFromUser = (userId: string, roleId: string) => {
    // 更新用户角色
    setUsers(prev => prev.map(user => 
      user.id === userId 
        ? { ...user, roles: user.roles.filter(r => r !== roleId) }
        : user
    ));

    // 移除分配记录
    setUserRoleAssignments(prev => 
      prev.filter(assignment => 
        !(assignment.userId === userId && assignment.roleId === roleId)
      )
    );

    // 更新角色的用户数量
    setRoles(prev => prev.map(role => 
      role.id === roleId 
        ? { ...role, userCount: Math.max(0, role.userCount - 1) }
        : role
    ));

    // 记录日志
    const roleName = roles.find(r => r.id === roleId)?.name || roleId;
    const userName = users.find(u => u.id === userId)?.name || userId;
    addLog("角色移除", `角色: ${roleName}`, `从用户 ${userName} 移除角色 ${roleName}`);
  };

  const handleBatchAssignRole = (userIds: string[], roleId: string) => {
    userIds.forEach(userId => {
      const user = users.find(u => u.id === userId);
      if (user && !user.roles.includes(roleId)) {
        handleAssignRoleToUser(userId, roleId);
      }
    });
    
    setSelectedUsers([]);
    setIsBatchUserAssignDialogOpen(false);
    
    // 记录批量操作日志
    const roleName = roles.find(r => r.id === roleId)?.name || roleId;
    addLog("批量角色分配", `角色: ${roleName}`, `为 ${userIds.length} 个用户批量分配角色 ${roleName}`);
  };

  const handleSelectUser = (userId: string) => {
    setSelectedUsers(prev => 
      prev.includes(userId) 
        ? prev.filter(id => id !== userId)
        : [...prev, userId]
    );
  };

  const handleSelectAllUsers = () => {
    const filteredUsers = users.filter(user => 
      user.name.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
      user.department.toLowerCase().includes(userSearchTerm.toLowerCase())
    );
    
    if (selectedUsers.length === filteredUsers.length) {
      setSelectedUsers([]);
    } else {
      setSelectedUsers(filteredUsers.map(user => user.id));
    }
  };

  // 清空所有权限
  const clearAllPermissions = () => {
    setFormData({
      ...formData,
      permissions: []
    });
  };

  // 选择所有权限
  const selectAllPermissions = () => {
    setFormData({
      ...formData,
      permissions: allPermissions.map(p => p.id)
    });
  };

  const filteredRoles = roles.filter(role => {
    const matchesSearch = role.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         role.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = statusFilter === "all" || role.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedRoles(filteredRoles.map(role => role.id));
    } else {
      setSelectedRoles([]);
    }
  };

  const handleSelectRole = (roleId: string, checked: boolean) => {
    if (checked) {
      setSelectedRoles([...selectedRoles, roleId]);
    } else {
      setSelectedRoles(selectedRoles.filter(id => id !== roleId));
    }
  };

  const groupedPermissions = allPermissions.reduce((acc, permission) => {
    if (!acc[permission.module]) {
      acc[permission.module] = [];
    }
    acc[permission.module].push(permission);
    return acc;
  }, {} as Record<string, Permission[]>);

  return (
    <div className="space-y-6">
      {/* 页面标题和操作 */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 border border-blue-100">
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <div className="p-3 bg-blue-100 rounded-xl">
              <Shield className="h-8 w-8 text-blue-600" />
            </div>
            <div>
              <h2 className="text-3xl font-bold text-gray-900">角色管理</h2>
              <p className="text-gray-600 mt-1 text-lg">管理系统角色和权限配置</p>
              <div className="flex items-center space-x-4 mt-2">
                <Badge variant="outline" className="bg-white">
                  总角色数: {roles.length}
                </Badge>
                <Badge variant="outline" className="bg-white">
                  活跃角色: {roles.filter(r => r.status === 'active').length}
                </Badge>
              </div>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            {selectedRoles.length > 0 && (
              <div className="flex items-center space-x-2 animate-fade-in bg-orange-50 px-3 py-2 rounded-lg border border-orange-200">
                <Badge variant="outline" className="bg-orange-100 text-orange-700 border-orange-300">
                  已选择 {selectedRoles.length} 个角色
                </Badge>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleBatchDelete}
                  className="text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200"
                >
                  <Trash2 className="h-4 w-4 mr-1" />
                  批量删除
                </Button>
              </div>
            )}
            <Button
              variant="outline"
              onClick={() => setIsLogDialogOpen(true)}
              className="flex items-center space-x-2 hover:bg-gray-50 transition-all duration-200 shadow-sm"
            >
              <Settings className="h-4 w-4" />
              <span>操作日志</span>
            </Button>
            <Button
               variant="outline"
               onClick={() => setIsUserRoleManagementDialogOpen(true)}
               className="flex items-center space-x-2 hover:bg-blue-50 transition-all duration-200 shadow-sm"
             >
               <Users className="h-4 w-4" />
               <span>用户角色管理</span>
             </Button>
           </div>
         </div>
       </div>

       <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button className="flex items-center space-x-2">
                <Plus className="h-4 w-4" />
                <span>新建角色</span>
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>新建角色</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="name">角色名称</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    placeholder="请输入角色名称"
                  />
                </div>
                <div>
                  <Label htmlFor="description">角色描述</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    placeholder="请输入角色描述"
                    rows={3}
                  />
                </div>
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label>权限配置</Label>
                    <div className="flex items-center space-x-2">
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => setIsPermissionTemplateDialogOpen(true)}
                      >
                        <Copy className="h-4 w-4 mr-1" />
                        使用模板
                      </Button>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={openPermissionPreview}
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        预览权限
                      </Button>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2 mb-2">
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      onClick={selectAllPermissions}
                    >
                      全选
                    </Button>
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      onClick={clearAllPermissions}
                    >
                      清空
                    </Button>
                    <Badge variant="outline">
                      已选择 {formData.permissions.length} / {allPermissions.length} 个权限
                    </Badge>
                  </div>
                  
                  <div className="mt-2 space-y-4 max-h-60 overflow-y-auto border rounded-md p-4">
                    {Object.entries(groupedPermissions).map(([module, permissions]) => {
                      const modulePermissionIds = permissions.map(p => p.id);
                      const selectedCount = modulePermissionIds.filter(id => formData.permissions.includes(id)).length;
                      const isAllSelected = selectedCount === modulePermissionIds.length;
                      const isPartialSelected = selectedCount > 0 && selectedCount < modulePermissionIds.length;
                      
                      return (
                        <div key={module}>
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="font-medium text-sm text-gray-700">{module}</h4>
                            <div className="flex items-center space-x-2">
                              <Badge variant="outline" className="text-xs">
                                {selectedCount}/{modulePermissionIds.length}
                              </Badge>
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={() => handleBatchPermissionChange(
                                  modulePermissionIds, 
                                  isAllSelected ? "deselect" : "select"
                                )}
                                className="text-xs px-2 py-1 h-6"
                              >
                                {isAllSelected ? "取消全选" : "全选"}
                              </Button>
                            </div>
                          </div>
                          <div className="grid grid-cols-2 gap-2">
                            {permissions.map((permission) => (
                              <div key={permission.id} className="flex items-center space-x-2">
                                <Checkbox
                                  id={permission.id}
                                  checked={formData.permissions.includes(permission.id)}
                                  onCheckedChange={(checked) => 
                                    handlePermissionChange(permission.id, checked as boolean)
                                  }
                                />
                                <Label htmlFor={permission.id} className="text-sm">
                                  {permission.name}
                                </Label>
                              </div>
                            ))}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
                <div className="flex justify-end space-x-2">
                  <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                    取消
                  </Button>
                  <Button onClick={handleCreateRole}>
                    创建
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* 搜索和过滤 */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex space-x-4">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                placeholder="搜索角色名称或描述..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10"
              />
            </div>
            <div className="flex items-center space-x-2">
              <Label>状态筛选：</Label>
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value as "all" | "active" | "inactive")}
                className="border rounded px-3 py-2"
              >
                <option value="all">全部</option>
                <option value="active">启用</option>
                <option value="inactive">停用</option>
              </select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* 角色列表 */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Shield className="h-5 w-5 mr-2" />
            角色列表
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-12">
                  <Checkbox
                    checked={selectedRoles.length === filteredRoles.length && filteredRoles.length > 0}
                    onCheckedChange={handleSelectAll}
                  />
                </TableHead>
                <TableHead>角色名称</TableHead>
                <TableHead>描述</TableHead>
                <TableHead>权限数量</TableHead>
                <TableHead>用户数量</TableHead>
                <TableHead>状态</TableHead>
                <TableHead>创建时间</TableHead>
                <TableHead>操作</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredRoles.map((role) => (
                <TableRow key={role.id}>
                  <TableCell>
                    <Checkbox
                      checked={selectedRoles.includes(role.id)}
                      onCheckedChange={(checked) => handleSelectRole(role.id, checked as boolean)}
                    />
                  </TableCell>
                  <TableCell className="font-medium">{role.name}</TableCell>
                  <TableCell className="max-w-xs truncate">{role.description}</TableCell>
                  <TableCell>
                    <Badge variant="outline">
                      {role.permissions.length} 个权限
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center">
                      <Users className="h-4 w-4 mr-1 text-gray-400" />
                      {role.userCount}
                    </div>
                  </TableCell>
                  <TableCell>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleToggleRoleStatus(role)}
                    >
                      <Badge variant={role.status === "active" ? "default" : "secondary"}>
                        {role.status === "active" ? "启用" : "停用"}
                      </Badge>
                    </Button>
                  </TableCell>
                  <TableCell>{role.createdAt}</TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => openPermissionDialog(role)}
                      >
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => openEditDialog(role)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          setSelectedRoleForAssignment(role);
                          setIsUserAssignDialogOpen(true);
                        }}
                      >
                        <UserPlus className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          setSelectedRole(role);
                          setIsDeleteDialogOpen(true);
                        }}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* 删除确认对话框 */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <AlertTriangle className="h-5 w-5 mr-2 text-red-500" />
              确认删除角色
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p>您确定要删除角色 <strong>"{selectedRole?.name}"</strong> 吗？</p>
            {selectedRole?.userCount && selectedRole.userCount > 0 && (
              <div className="bg-red-50 border border-red-200 rounded p-3">
                <p className="text-red-700 text-sm">
                  ⚠️ 该角色下还有 {selectedRole.userCount} 个用户，删除后这些用户将失去相关权限。
                </p>
              </div>
            )}
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>
                取消
              </Button>
              <Button variant="destructive" onClick={handleDeleteRole}>
                确认删除
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* 操作日志对话框 */}
      <Dialog open={isLogDialogOpen} onOpenChange={setIsLogDialogOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>操作日志</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            {operationLogs.length === 0 ? (
              <p className="text-gray-500 text-center py-8">暂无操作日志</p>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>操作时间</TableHead>
                    <TableHead>操作类型</TableHead>
                    <TableHead>目标对象</TableHead>
                    <TableHead>操作人</TableHead>
                    <TableHead>详细信息</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {operationLogs.map((log) => (
                    <TableRow key={log.id}>
                      <TableCell>{log.timestamp}</TableCell>
                      <TableCell>
                        <Badge variant="outline">{log.action}</Badge>
                      </TableCell>
                      <TableCell>{log.target}</TableCell>
                      <TableCell>{log.operator}</TableCell>
                      <TableCell className="max-w-xs truncate">{log.details}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* 编辑对话框 */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>编辑角色</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="edit-name">角色名称</Label>
              <Input
                id="edit-name"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                placeholder="请输入角色名称"
              />
            </div>
            <div>
              <Label htmlFor="edit-description">角色描述</Label>
              <Textarea
                id="edit-description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="请输入角色描述"
                rows={3}
              />
            </div>
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label>权限配置</Label>
                <div className="flex items-center space-x-2">
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => setIsPermissionTemplateDialogOpen(true)}
                  >
                    <Copy className="h-4 w-4 mr-1" />
                    使用模板
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={openPermissionPreview}
                  >
                    <Eye className="h-4 w-4 mr-1" />
                    预览权限
                  </Button>
                </div>
              </div>
              
              <div className="flex items-center space-x-2 mb-2">
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  onClick={selectAllPermissions}
                >
                  全选
                </Button>
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  onClick={clearAllPermissions}
                >
                  清空
                </Button>
                <Badge variant="outline">
                  已选择 {formData.permissions.length} / {allPermissions.length} 个权限
                </Badge>
              </div>
              
              <div className="mt-2 space-y-4 max-h-60 overflow-y-auto border rounded-md p-4">
                {Object.entries(groupedPermissions).map(([module, permissions]) => {
                  const modulePermissionIds = permissions.map(p => p.id);
                  const selectedCount = modulePermissionIds.filter(id => formData.permissions.includes(id)).length;
                  const isAllSelected = selectedCount === modulePermissionIds.length;
                  
                  return (
                    <div key={module}>
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium text-sm text-gray-700">{module}</h4>
                        <div className="flex items-center space-x-2">
                          <Badge variant="outline" className="text-xs">
                            {selectedCount}/{modulePermissionIds.length}
                          </Badge>
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            onClick={() => handleBatchPermissionChange(
                              modulePermissionIds, 
                              isAllSelected ? "deselect" : "select"
                            )}
                            className="text-xs px-2 py-1 h-6"
                          >
                            {isAllSelected ? "取消全选" : "全选"}
                          </Button>
                        </div>
                      </div>
                      <div className="grid grid-cols-2 gap-2">
                        {permissions.map((permission) => (
                          <div key={permission.id} className="flex items-center space-x-2">
                            <Checkbox
                              id={`edit-${permission.id}`}
                              checked={formData.permissions.includes(permission.id)}
                              onCheckedChange={(checked) => 
                                handlePermissionChange(permission.id, checked as boolean)
                              }
                            />
                            <Label htmlFor={`edit-${permission.id}`} className="text-sm">
                              {permission.name}
                            </Label>
                          </div>
                        ))}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
                取消
              </Button>
              <Button onClick={handleEditRole}>
                保存
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* 权限查看对话框 */}
      <Dialog open={isPermissionDialogOpen} onOpenChange={setIsPermissionDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>
              {selectedRole?.name} - 权限详情
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            {Object.entries(groupedPermissions).map(([module, permissions]) => {
              const rolePermissions = permissions.filter(p => 
                selectedRole?.permissions.includes(p.id)
              );
              
              if (rolePermissions.length === 0) return null;
              
              return (
                <div key={module}>
                  <h4 className="font-medium text-gray-700 mb-2">{module}</h4>
                  <div className="space-y-2">
                    {rolePermissions.map((permission) => (
                      <div key={permission.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                        <div>
                          <span className="font-medium text-sm">{permission.name}</span>
                          <p className="text-xs text-gray-600">{permission.description}</p>
                        </div>
                        <Badge variant="outline">已授权</Badge>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>
        </DialogContent>
      </Dialog>

      {/* 权限模板选择对话框 */}
      <Dialog open={isPermissionTemplateDialogOpen} onOpenChange={setIsPermissionTemplateDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>选择权限模板</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-gray-600">选择一个预设的权限模板快速配置角色权限</p>
            <div className="grid gap-4">
              {permissionTemplates.map((template) => (
                <div key={template.id} className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer"
                     onClick={() => applyPermissionTemplate(template)}>
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium">{template.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{template.description}</p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline">
                        {template.permissions.length} 个权限
                      </Badge>
                      <Button size="sm">
                        应用模板
                      </Button>
                    </div>
                  </div>
                  <div className="mt-3">
                    <div className="flex flex-wrap gap-1">
                      {template.permissions.slice(0, 6).map((permId) => {
                        const perm = allPermissions.find(p => p.id === permId);
                        return perm ? (
                          <Badge key={permId} variant="secondary" className="text-xs">
                            {perm.name}
                          </Badge>
                        ) : null;
                      })}
                      {template.permissions.length > 6 && (
                        <Badge variant="secondary" className="text-xs">
                          +{template.permissions.length - 6} 更多
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* 权限预览对话框 */}
      <Dialog open={isPermissionPreviewDialogOpen} onOpenChange={setIsPermissionPreviewDialogOpen}>
        <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>权限预览</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <p className="text-sm text-gray-600">
                当前已选择 <strong>{formData.permissions.length}</strong> 个权限
              </p>
              <Badge variant="outline">
                覆盖率: {Math.round((formData.permissions.length / allPermissions.length) * 100)}%
              </Badge>
            </div>
            
            {formData.permissions.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <Shield className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                <p>尚未选择任何权限</p>
              </div>
            ) : (
              <div className="space-y-4">
                {Object.entries(groupedPermissions).map(([module, permissions]) => {
                  const selectedPermissions = permissions.filter(p => formData.permissions.includes(p.id));
                  
                  if (selectedPermissions.length === 0) return null;
                  
                  return (
                    <div key={module} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="font-medium text-gray-700">{module}</h4>
                        <Badge variant="outline">
                          {selectedPermissions.length}/{permissions.length} 个权限
                        </Badge>
                      </div>
                      <div className="grid grid-cols-1 gap-2">
                        {selectedPermissions.map((permission) => (
                          <div key={permission.id} className="flex items-center justify-between p-2 bg-green-50 rounded border-l-4 border-green-400">
                            <div>
                              <span className="font-medium text-sm text-green-800">{permission.name}</span>
                              <p className="text-xs text-green-600">{permission.description}</p>
                            </div>
                            <CheckCircle className="h-4 w-4 text-green-500" />
                          </div>
                        ))}
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
            
            <div className="flex justify-end">
              <Button onClick={() => setIsPermissionPreviewDialogOpen(false)}>
                确认
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* 用户分配对话框 */}
      <Dialog open={isUserAssignDialogOpen} onOpenChange={setIsUserAssignDialogOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              为角色 "{selectedRoleForAssignment?.name}" 分配用户
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex items-center space-x-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="搜索用户姓名、邮箱或部门..."
                  value={userSearchTerm}
                  onChange={(e) => setUserSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
              <Button
                variant="outline"
                onClick={() => setIsBatchUserAssignDialogOpen(true)}
              >
                批量分配
              </Button>
            </div>
            
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-12">
                    <Checkbox
                      checked={selectedUsers.length === users.filter(user => 
                        user.name.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
                        user.email.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
                        user.department.toLowerCase().includes(userSearchTerm.toLowerCase())
                      ).length && users.length > 0}
                      onCheckedChange={handleSelectAllUsers}
                    />
                  </TableHead>
                  <TableHead>用户姓名</TableHead>
                  <TableHead>邮箱</TableHead>
                  <TableHead>部门</TableHead>
                  <TableHead>状态</TableHead>
                  <TableHead>当前角色</TableHead>
                  <TableHead>操作</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {users
                  .filter(user => 
                    user.name.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
                    user.email.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
                    user.department.toLowerCase().includes(userSearchTerm.toLowerCase())
                  )
                  .map((user) => {
                    const hasRole = user.roles.includes(selectedRoleForAssignment?.id || "");
                    return (
                      <TableRow key={user.id}>
                        <TableCell>
                          <Checkbox
                            checked={selectedUsers.includes(user.id)}
                            onCheckedChange={() => handleSelectUser(user.id)}
                          />
                        </TableCell>
                        <TableCell className="font-medium">{user.name}</TableCell>
                        <TableCell>{user.email}</TableCell>
                        <TableCell>{user.department}</TableCell>
                        <TableCell>
                          <Badge variant={user.status === "active" ? "default" : "secondary"}>
                            {user.status === "active" ? "启用" : "停用"}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="flex flex-wrap gap-1">
                            {user.roles.map(roleId => {
                              const role = roles.find(r => r.id === roleId);
                              return role ? (
                                <Badge key={roleId} variant="outline" className="text-xs">
                                  {role.name}
                                </Badge>
                              ) : null;
                            })}
                          </div>
                        </TableCell>
                        <TableCell>
                          {hasRole ? (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleRemoveRoleFromUser(user.id, selectedRoleForAssignment?.id || "")}
                              className="text-red-600 hover:text-red-700"
                            >
                              移除角色
                            </Button>
                          ) : (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleAssignRoleToUser(user.id, selectedRoleForAssignment?.id || "")}
                              disabled={user.status === "inactive"}
                            >
                              分配角色
                            </Button>
                          )}
                        </TableCell>
                      </TableRow>
                    );
                  })}
              </TableBody>
            </Table>
          </div>
        </DialogContent>
      </Dialog>

      {/* 批量用户分配对话框 */}
      <Dialog open={isBatchUserAssignDialogOpen} onOpenChange={setIsBatchUserAssignDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>批量分配角色</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-gray-600">
              将为选中的 {selectedUsers.length} 个用户分配角色 "{selectedRoleForAssignment?.name}"
            </p>
            
            <div className="max-h-40 overflow-y-auto border rounded p-3">
              {selectedUsers.map(userId => {
                const user = users.find(u => u.id === userId);
                return user ? (
                  <div key={userId} className="flex items-center justify-between py-1">
                    <span className="text-sm">{user.name} ({user.email})</span>
                    <Badge variant="outline" className="text-xs">{user.department}</Badge>
                  </div>
                ) : null;
              })}
            </div>
            
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setIsBatchUserAssignDialogOpen(false)}>
                取消
              </Button>
              <Button 
                onClick={() => handleBatchAssignRole(selectedUsers, selectedRoleForAssignment?.id || "")}
                disabled={selectedUsers.length === 0}
              >
                确认分配
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* 用户角色管理对话框 */}
      <Dialog open={isUserRoleManagementDialogOpen} onOpenChange={setIsUserRoleManagementDialogOpen}>
        <DialogContent className="max-w-6xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>用户角色管理</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex items-center space-x-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="搜索用户姓名、邮箱或部门..."
                  value={userSearchTerm}
                  onChange={(e) => setUserSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>用户信息</TableHead>
                  <TableHead>部门</TableHead>
                  <TableHead>状态</TableHead>
                  <TableHead>角色</TableHead>
                  <TableHead>操作</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {users
                  .filter(user => 
                    user.name.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
                    user.email.toLowerCase().includes(userSearchTerm.toLowerCase()) ||
                    user.department.toLowerCase().includes(userSearchTerm.toLowerCase())
                  )
                  .map((user) => (
                    <TableRow key={user.id}>
                      <TableCell>
                        <div>
                          <div className="font-medium">{user.name}</div>
                          <div className="text-sm text-gray-600">{user.email}</div>
                        </div>
                      </TableCell>
                      <TableCell>{user.department}</TableCell>
                      <TableCell>
                        <Badge variant={user.status === "active" ? "default" : "secondary"}>
                          {user.status === "active" ? "启用" : "停用"}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex flex-wrap gap-1 max-w-xs">
                          {user.roles.length === 0 ? (
                            <Badge variant="outline" className="text-xs text-gray-500">
                              无角色
                            </Badge>
                          ) : (
                            user.roles.map(roleId => {
                              const role = roles.find(r => r.id === roleId);
                              return role ? (
                                <div key={roleId} className="flex items-center space-x-1">
                                  <Badge variant="outline" className="text-xs">
                                    {role.name}
                                  </Badge>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleRemoveRoleFromUser(user.id, roleId)}
                                    className="h-4 w-4 p-0 text-red-500 hover:text-red-700"
                                  >
                                    <XCircle className="h-3 w-3" />
                                  </Button>
                                </div>
                              ) : null;
                            })
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          <select
                            className="border rounded px-2 py-1 text-sm"
                            onChange={(e) => {
                              if (e.target.value) {
                                handleAssignRoleToUser(user.id, e.target.value);
                                e.target.value = "";
                              }
                            }}
                            disabled={user.status === "inactive"}
                          >
                            <option value="">选择角色...</option>
                            {roles
                              .filter(role => !user.roles.includes(role.id) && role.status === "active")
                              .map(role => (
                                <option key={role.id} value={role.id}>
                                  {role.name}
                                </option>
                              ))
                            }
                          </select>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}